service: medical-agent

package:
  individually: true

custom:
  stages:
    - dev
    - production
  stage: ${opt:stage, 'dev'}

build:
  esbuild:
    minify: true
    sourcemap: true
    keepNames: true
    external:
      - '@voltagent/core'
      - '@voltagent/vercel-ai'
      - '@ai-sdk/amazon-bedrock'
      - 'libsql'
      - '@libsql/client'
      - '@libsql/linux-x64-gnu'
    

provider:
  name: aws
  stage: dev
  runtime: nodejs22.x
  region: us-east-1
  environment:
    NODE_OPTIONS: "--enable-source-maps"
    TABLE_NAME: medical-agent-memory
  iamRoleStatements:
    - Effect: Allow
      Action:
        - bedrock:InvokeModel
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:GetItem
        - events:PutEvents
      Resource: "*"

functions:
  medicalAnalysis:
    handler: src/index.handler
    events:
      - eventBridge:
          eventBus: default
          pattern:
            source: ["aws.s3"]
            detail-type: ["Object Created"]
            detail:
              bucket:
                name: [!Ref LabResultsBucket]
              object:
                key: [{ "wildcard": "*.json"}]    
  
  appointment:
    handler: src/appointment.handler
    events:
      - eventBridge:
          eventBus: default
          pattern:
            source: ["medical.analysis"]
            detail-type: ["Medical Emergency Alert", "Medical Priority Appointment", "Medical Routine Appointment", "Medical General Event"]

resources:
  Resources:
    MedicalMemoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: medical-agent-memory
        AttributeDefinitions:
          - AttributeName: patient_id
            AttributeType: S
          - AttributeName: record_id
            AttributeType: S
        KeySchema:
          - AttributeName: patient_id
            KeyType: HASH
          - AttributeName: record_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
    
    LabResultsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-lab-results-${self:provider.stage}
        NotificationConfiguration:
          EventBridgeConfiguration:
            EventBridgeEnabled: true
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        VersioningConfiguration:
          Status: Enabled