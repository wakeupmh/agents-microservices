service: medical-strands-agent

frameworkVersion: '4.18'
useDotenv: true

package:
  individually: true

provider:
  name: aws
  runtime: python3.12
  region: us-east-1
  iamRoleStatements:
    - Effect: Allow
      Action:
        - bedrock:InvokeModel
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:GetItem
        - events:PutEvents
      Resource: "*"

functions:
  medicalAgent:
    handler: src.agents.medical_agent.handler.medical_analysis
    timeout: 300
    events:
      - eventBridge:
          pattern:
            source: ["aws.s3"]
            detail:
              eventSource: ["s3.amazonaws.com"]
              eventName: ["ObjectCreated:Put"]
              bucket:
                name: ["${self:service}-lab-results-${self:provider.stage}"]
    package:
      include:
        - "src/agents/medical_agent/**"
        - "src/tools/**"
  
  createAppointment:
    handler: src.functions.appointment_handler.create_appointment
    timeout: 60
    events:
      - eventBridge:
          pattern:
            source: ["medical.analysis"]
            detail-type: ["Medical Emergency Alert", "Medical Priority Appointment", "Medical Routine Appointment"]
    package:
      include:
        - "src/functions/**"

resources:
  Resources:
    MedicalMemoryTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: medical-agent-memory
        AttributeDefinitions:
          - AttributeName: patient_id
            AttributeType: S
          - AttributeName: record_id
            AttributeType: S
        KeySchema:
          - AttributeName: patient_id
            KeyType: HASH
          - AttributeName: record_id
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TimeToLiveSpecification:
          AttributeName: ttl
          Enabled: true
    
    LabResultsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-lab-results-${self:provider.stage}
        NotificationConfiguration:
          EventBridgeConfiguration:
            EventBridgeEnabled: true
        PublicAccessBlockConfiguration:
          BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        VersioningConfiguration:
          Status: Enabled
plugins:
  - serverless-python-requirements
